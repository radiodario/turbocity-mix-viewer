<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>turbocity-mix-viewer</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>



<div class="viewport"></div>
<script id="live-reload" src="http://localhost:35729/livereload.js"></script>
<script id="vertex-shader" type="x-shader/x-vertex">

  varying vec2 vUv;

  void main()
  {
    vUv = uv;
    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
    gl_Position = projectionMatrix * mvPosition;
  }

</script>
<script id="fragment-shader-1" type="x-shader/x-fragment">

  uniform float time;
  uniform vec2 resolution;

  varying vec2 vUv;

  void main( void ) {

    vec2 position = -1.0 + 2.0 * vUv;

    float red = abs( sin( position.x * position.y + time / 5.0 ) );
    float green = abs( sin( position.x * position.y + time / 4.0 ) );
    float blue = abs( sin( position.x * position.y + time / 3.0 ) );
    gl_FragColor = vec4( red, green, blue, 1.0 );

  }
</script>
<script id="fragment-shader-2" type="x-shader/x-fragment">

  uniform float time;
  uniform vec2 resolution;

  varying vec2 vUv;

  void main( void ) {

    vec2 position = vUv;

    float color = 0.0;
    color += sin( position.x * cos( time / 15.0 ) * 80.0 ) + cos( position.y * cos( time / 15.0 ) * 10.0 );
    color += sin( position.y * sin( time / 10.0 ) * 40.0 ) + cos( position.x * sin( time / 25.0 ) * 40.0 );
    color += sin( position.x * sin( time / 5.0 ) * 10.0 ) + sin( position.y * sin( time / 35.0 ) * 80.0 );
    color *= sin( time / 10.0 ) * 0.5;

    gl_FragColor = vec4( vec3( color, color * 0.5, sin( color + time / 3.0 ) * 0.75 ), 1.0 );

  }
</script>
<script id="fragment-shader-3" type="x-shader/x-fragment">
  uniform float time;
  uniform vec2 resolution;

  varying vec2 vUv;
  #extension GL_OES_standard_derivatives : enable

  void main( void ) {
    float t = time;

    vec2 uv = vUv; // -1.0 + 2.0 *vUv;

    uv.y *= 0.2;
    uv *= mat2(.4,.3,-.3,.4)*10.;


    float z = exp(-uv.y*uv.y*(2000.+1000.*cos(t*0.074+0.36)))*((2.+sin(t*0.035))*0.2)+0.8*cos(uv.y*11.0);
    uv.x += 0.7 * sin(z+t*0.2)*0.3;
    float d = sin(uv.x*120.)+0.3;
    float aa = fwidth(d);
    float c = smoothstep(-aa,aa,d);

    gl_FragColor = vec4(c,c,c,1.0);

  }
</script>
<script id="fragment-shader-4" type="x-shader/x-fragment">

  uniform float time;
  uniform vec2 resolution;

  const float tau = 6.2831853;
  varying vec2 vUv;

  void main( void ) {

    vec2 uv = vUv;

    float r = 1.0;
    float a = time*.1;
    float c = cos(a)*r;
    float s = sin(a)*r;
    for ( int i=0; i<10; i++ )
    {
      //uv = abs(uv);

        // higher period symmetry
        float t = atan(uv.x,uv.y);
        const float q = 7. / tau;
        t *= q;
        t = abs(fract(t*.5+.5)*2.0-1.0);
        t /= q;
        uv = length(uv)*vec2(sin(t),cos(t));

        uv -= .7;
        uv = uv*c + s*uv.yx*vec2(1,-1);
    }

    gl_FragColor = .5+.5*sin(time+vec4(13,17,23,1);//*texture2D( iChannel0, uv*vec2(1,-1)+.5, -1.0 ));


  }

</script>

<script src="app.js"></script>
</body>
</html>